{"ast":null,"code":"var _jsxFileName = \"E:\\\\3rd_Sem\\\\Advance-Web-Tech\\\\Harry-potter-final\\\\client\\\\src\\\\components\\\\Gryffindor.js\";\nimport React, { Component } from 'react';\nimport { red } from '@material-ui/core/colors';\nimport gryffindor from '../gryffindor.png';\nimport './Header.css';\nimport { Typography, Grid, Card, CardMedia, CardContent, CardActions } from '@material-ui/core'; // const styles = theme => ({\n//     root: {\n//       flexGrow: 3,\n//     },\n//     form_root: {\n//       '& > *': {\n//         margin: theme.spacing(1),\n//       },\n//     },\n//     menuButton: {\n//       marginRight: theme.spacing(2),\n//     },\n//     title: {\n//         color: red,\n//       flexGrow: 1,\n//     },\n//     paper: {\n//       height: 280,\n//       width: 500,\n//     },\n//     control: {\n//       padding: theme.spacing(2),\n//     },\n//     hufflepuff: {\n//       //backgroundImage: `url(${logo})`,\n//       height: 280,\n//       backgroundPosition: 'center',\n//       filter: 9,\n//       backgroundSize: 'cover',\n//       backgroundRepeat: 'no-repeat'\n//     },\n//     card: {\n//       maxWidth: 500,\n//     },\n//     media: {\n//       height: 150,\n//       margin: 50,\n//       padding: 10,\n//       paddingTop: '50.25%', // 16:9\n//     },\n//     expand: {\n//       transform: 'rotate(0deg)',\n//       marginLeft: 'auto',\n//       transition: theme.transitions.create('transform', {\n//         duration: theme.transitions.duration.shortest,\n//       }),\n//     },\n//     expandOpen: {\n//       transform: 'rotate(180deg)',\n//     },\n//     avatar: {\n//       backgroundColor: red[500],\n//     },\n//     tableRoot: {\n//       width: '100%',\n//     },\n//     tableContainer: {\n//       maxHeight: 440,\n//     },\n//     modal_paper: {\n//       position: 'absolute',\n//       width: 400,\n//       backgroundColor: theme.palette.background.paper,\n//       border: '2px solid #000',\n//       boxShadow: theme.shadows[5],\n//       padding: theme.spacing(2, 4, 3),\n//     },\n//   });\n// //   const classes = useStyles()\n\nclass Gryffindor extends Component {\n  // const classes = useStyles()\n  //   constructor() {\n  //     super();\n  //   }\n  //   state = {\n  //     renderedResponse: ''\n  //   }\n  //   getResponse = async() => {\n  //     const response = await fetch('/api/getStudents');\n  //     const body = await response.json();\n  // \tconsole.log(\"body\");\n  //     if (response.status !== 200) throw Error(body.message);\n  //     return body;\n  //   }\n  //   componentDidMount() {\n  //     this.getResponse()\n  //       .then(res => {\n  //         const someData = res.students[0].firstname;\n  //         this.setState({ renderedResponse: someData });\n  //       })\n  //   }\n  render() {\n    let bgImgGryffindor = {\n      backgroundImage: `url(${gryffindor})`,\n      backgroundAttachment: 'fixed',\n      backgroundRepeat: 'no-repeat',\n      backgroundPosition: 'center',\n      width: '100%',\n      height: '100%',\n      backgroundColor: 'red'\n    };\n    return React.createElement(React.Fragment, null, React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(CardMedia, {\n      title: \"Gryffindor\",\n      className: \"cardMediaImg\",\n      image: gryffindor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(CardContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h2\",\n      color: \"textSecondary\",\n      component: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \" Gryffindor \")), React.createElement(CardActions, {\n      disableSpacing: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \" Toothbrush \"), React.createElement(Typography, {\n      gutterBottom: true,\n      variant: \"h6\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \" 23 \"))))));\n  }\n\n}\n\nexport default Gryffindor;","map":{"version":3,"sources":["E:/3rd_Sem/Advance-Web-Tech/Harry-potter-final/client/src/components/Gryffindor.js"],"names":["React","Component","red","gryffindor","Typography","Grid","Card","CardMedia","CardContent","CardActions","Gryffindor","render","bgImgGryffindor","backgroundImage","backgroundAttachment","backgroundRepeat","backgroundPosition","width","height","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAO,cAAP;AACA,SAASC,UAAT,EAAqBC,IAArB,EAA2BC,IAA3B,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,WAAzD,QAA4E,mBAA5E,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,MAAMC,UAAN,SAAyBT,SAAzB,CAAmC;AAC/B;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAU,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG;AAClBC,MAAAA,eAAe,EAAG,OAAMV,UAAW,GADjB;AAElBW,MAAAA,oBAAoB,EAAE,OAFJ;AAGlBC,MAAAA,gBAAgB,EAAE,WAHA;AAIlBC,MAAAA,kBAAkB,EAAE,QAJF;AAKlBC,MAAAA,KAAK,EAAE,MALW;AAMlBC,MAAAA,MAAM,EAAE,MANU;AAOlBC,MAAAA,eAAe,EAAE;AAPC,KAAtB;AAUA,WACI,0CACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAC,YAAjB;AAA8B,MAAA,SAAS,EAAC,cAAxC;AAAuD,MAAA,KAAK,EAAEhB,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,OAAO,EAAC,IAApB;AAAyB,MAAA,KAAK,EAAC,eAA/B;AAA+C,MAAA,SAAS,EAAC,IAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,CAFJ,EAKI,oBAAC,WAAD;AAAa,MAAA,cAAc,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,YAAY,MAAxB;AAAyB,MAAA,OAAO,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI,oBAAC,UAAD;AAAY,MAAA,YAAY,MAAxB;AAAyB,MAAA,OAAO,EAAC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ,CALJ,CADJ,CADJ,CADJ;AAgEH;;AArG8B;;AAwGnC,eAAeO,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { red } from '@material-ui/core/colors';\r\nimport gryffindor from '../gryffindor.png';\r\nimport './Header.css';\r\nimport { Typography, Grid, Card, CardMedia, CardContent, CardActions } from '@material-ui/core';\r\n// const styles = theme => ({\r\n//     root: {\r\n//       flexGrow: 3,\r\n//     },\r\n//     form_root: {\r\n//       '& > *': {\r\n//         margin: theme.spacing(1),\r\n//       },\r\n//     },\r\n//     menuButton: {\r\n//       marginRight: theme.spacing(2),\r\n//     },\r\n//     title: {\r\n//         color: red,\r\n//       flexGrow: 1,\r\n//     },\r\n//     paper: {\r\n//       height: 280,\r\n//       width: 500,\r\n//     },\r\n//     control: {\r\n//       padding: theme.spacing(2),\r\n//     },\r\n//     hufflepuff: {\r\n//       //backgroundImage: `url(${logo})`,\r\n//       height: 280,\r\n//       backgroundPosition: 'center',\r\n//       filter: 9,\r\n//       backgroundSize: 'cover',\r\n//       backgroundRepeat: 'no-repeat'\r\n//     },\r\n//     card: {\r\n//       maxWidth: 500,\r\n//     },\r\n//     media: {\r\n//       height: 150,\r\n//       margin: 50,\r\n//       padding: 10,\r\n//       paddingTop: '50.25%', // 16:9\r\n//     },\r\n//     expand: {\r\n//       transform: 'rotate(0deg)',\r\n//       marginLeft: 'auto',\r\n//       transition: theme.transitions.create('transform', {\r\n//         duration: theme.transitions.duration.shortest,\r\n//       }),\r\n//     },\r\n//     expandOpen: {\r\n//       transform: 'rotate(180deg)',\r\n//     },\r\n//     avatar: {\r\n//       backgroundColor: red[500],\r\n//     },\r\n//     tableRoot: {\r\n//       width: '100%',\r\n//     },\r\n//     tableContainer: {\r\n//       maxHeight: 440,\r\n//     },\r\n//     modal_paper: {\r\n//       position: 'absolute',\r\n//       width: 400,\r\n//       backgroundColor: theme.palette.background.paper,\r\n//       border: '2px solid #000',\r\n//       boxShadow: theme.shadows[5],\r\n//       padding: theme.spacing(2, 4, 3),\r\n//     },\r\n//   });\r\n\r\n// //   const classes = useStyles()\r\n\r\n\r\nclass Gryffindor extends Component {\r\n    // const classes = useStyles()\r\n    //   constructor() {\r\n    //     super();\r\n    //   }\r\n\r\n    //   state = {\r\n    //     renderedResponse: ''\r\n    //   }\r\n\r\n    //   getResponse = async() => {\r\n    //     const response = await fetch('/api/getStudents');\r\n    //     const body = await response.json();\r\n    // \tconsole.log(\"body\");\r\n    //     if (response.status !== 200) throw Error(body.message);\r\n    //     return body;\r\n    //   }\r\n\r\n    //   componentDidMount() {\r\n    //     this.getResponse()\r\n    //       .then(res => {\r\n    //         const someData = res.students[0].firstname;\r\n    //         this.setState({ renderedResponse: someData });\r\n    //       })\r\n    //   }\r\n\r\n    render() {\r\n        let bgImgGryffindor = {\r\n            backgroundImage: `url(${gryffindor})`,\r\n            backgroundAttachment: 'fixed',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            width: '100%',\r\n            height: '100%',\r\n            backgroundColor: 'red',\r\n      \r\n          }\r\n        return (\r\n            <>\r\n                <Grid item xs={6}>\r\n                    <Card className=\"card\">\r\n                        <CardMedia title=\"Gryffindor\" className=\"cardMediaImg\" image={gryffindor} />\r\n                        <CardContent>\r\n                            <Typography variant=\"h2\" color=\"textSecondary\" component=\"h1\"> Gryffindor </Typography>\r\n                        </CardContent>\r\n                        <CardActions disableSpacing>\r\n                            <Grid item xs>\r\n                                <Typography gutterBottom variant=\"h4\"> Toothbrush </Typography>\r\n                                <Typography gutterBottom variant=\"h6\"> 23 </Typography>\r\n                            </Grid>\r\n                            {/* <IconButton className={clsx(classes.expand, { [classes.expandOpen]: expanded })}\r\n                                onClick={handleExpandClick} aria-expanded={expanded} aria-label=\"show more\" >\r\n                                <ExpandMoreIcon />\r\n                            </IconButton> */}\r\n                        </CardActions>\r\n                        {/* <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                            <CardContent>\r\n                                <Paper className={classes.tableRoot}>\r\n                                    <TableContainer className={classes.tableContainer}>\r\n                                        <Table stickyHeader aria-label=\"sticky table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    {columns.map(column => (\r\n                                                        <TableCell\r\n                                                            key={column.id}\r\n                                                            align={column.align}\r\n                                                            style={{ minWidth: column.minWidth }}>\r\n                                                            {column.label}\r\n                                                        </TableCell>\r\n                                                    ))}\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\r\n                                                    return (\r\n                                                        <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                                                            {columns.map(column => {\r\n                                                                const value = row[column.id];\r\n                                                                return (\r\n                                                                    <TableCell key={column.id} align={column.align}>\r\n                                                                        {column.format && typeof value === 'number' ? column.format(value) : value}\r\n                                                                    </TableCell>\r\n                                                                );\r\n                                                            })}\r\n                                                        </TableRow>\r\n                                                    );\r\n                                                })}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                    <TablePagination\r\n                                        rowsPerPageOptions={[5, 10, 20]} component=\"div\" count={rows.length}\r\n                                        rowsPerPage={rowsPerPage} page={page} onChangePage={handleChangePage} onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                                    />\r\n                                </Paper>\r\n                            </CardContent>\r\n                        </Collapse> */}\r\n                    </Card>\r\n                </Grid>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Gryffindor;"]},"metadata":{},"sourceType":"module"}